const chalk = require('chalk');
const fs = require('fs');
const glob = require('glob');
const JSZip = require('jszip');
const path = require('path');

const zip = new JSZip();

console.log(chalk.blue('Generating zip file'));

glob.sync(`${__dirname}/../src/*/collection.json`)
  .map(collectionJSON => path.resolve(`${collectionJSON}/..`))
  .forEach(collectionDirectory => {
    const collectionName = path.basename(collectionDirectory);
    const rest = collectionDirectory.replace(collectionName, '');

    console.log('');
    console.log(chalk.blue(`Collection: ${collectionName}`));

    glob.sync(`${collectionDirectory}/*/fragment.json`)
      .map(fragmentJSON => path.resolve(`${fragmentJSON}/..`))
      .forEach(fragmentDirectory => {
        const fragmentName = path.basename(fragmentDirectory);

        console.log(chalk.blue(`  Fragment: ${fragmentName}`));

        glob.sync(`${fragmentDirectory}/**/*`)
          .filter(fragmentFilePath => fs.lstatSync(fragmentFilePath).isFile())
          .map(fragmentFilePath => ({
            fragmentFileContent: fs.readFileSync(fragmentFilePath, 'utf-8'),
            fragmentFileLocalPath: fragmentFilePath.replace(rest, '')
          }))
          .forEach(({ fragmentFileContent, fragmentFileLocalPath }) => {
            zip.file(fragmentFileLocalPath, fragmentFileContent);
          });
      });
  });

zip
.generateNodeStream({type:'nodebuffer',streamFiles:true})
.pipe(fs.createWriteStream('fragments.zip'))
.on('finish', () => {
  console.log('');
  console.log(chalk.blue('fragments.zip file created '));
  console.log(chalk.blue('Import them to your liferay-portal to start using them:'));
  console.log('');
  console.log(chalk.gray('https://dev.liferay.com/discover/portal/-/knowledge_base/7-1/exporting-and-importing-fragments#importing-collections'))
});
